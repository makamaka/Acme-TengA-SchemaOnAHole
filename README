TengA::SchemaOnAHole - Advance and make a hole to Teng::Schema::Declare
=================

INSTALLATION

To install this module type the following:

   perl Makefile.PL
   make
   make test
   make install

SYNOPSIS
        package MyModel::Schema;
    
        use Teng::Schema::Declare;
        use TengA::SchemaOnAHole (
           'foo' => sub  {
                my ( $schema, $table, $col, $val ) = @_;
                $schema->{ foo }->{ $table->name }->{ $col } = $val;
            }
        );
    
        table_in_private_room {
            name "table1";
            columns qw( col1 col2 col3 );
            foo 'foo', 'bar';
        };
    
        table_in_private_room {
            name "table2";
            columns qw( col1 col2 );
            foo 'bar', 'baz';
        };
    
    
        #
        # as plugin moudle
        #
    
        package TengA::Schema::Declare::FooBar;
    
        use strict;
        require TengA::SchemaOnAHole;
    
        sub import {
            my ( $class, @args ) = @_;
            TengA::SchemaOnAHole->import(
                { import_level => 1 },
                'bar' => sub  {
                    my ( $schema, $table, @args ) = @_;
                    # ...
                },
            );
        }
    
        # and use it.
        package MyModel::Schema2;
    
        use Teng::Schema::Declare;
        use TengA::Schema::Declare::FooBar;
    
        table_in_private_room {
            name "table1";
            columns qw( col1 col2 col3 );
            bar 'foo', 'bar';
        };

DESCRIPTION
    This module advances Teng::Schema::Declare (so, Teng - Advanced module).
    You can use your new functions in Teng Schema DSL.

INTRODUCE FUNCTIONS
        use Teng::Schema::Declare;
        use TengA::SchemaOnAHole (
           'foo' => sub  {
                my ( $schema, $table, @args ) = @_;
                # ...
            }
        );

    You pass fucntion name - code reference pairs to using
    TengA::SchemaOnAHole. The code references take Teng::Schema object,
    Teng::Schema::Table and passed arguments.

    You can pass a optional hash reference as first argument.

  option
    import_level
        The import level for your setting functoin. It is useful that you
        make a plugin module.

            package TengA::Schema::Declare::FooBar;
    
            require TengA::SchemaOnAHole;
    
            sub import {
                my ( $class, @args ) = @_;
                TengA::SchemaOnAHole->import(
                    { import_level => 1 },
                    'foo' => sub  {
                        my ( $schema, $table, @args ) = @_;
                        # ...
                    },
                );
            }

EXPORT FUNCTIONS
  table_in_private_room
    You can use your introduced functions only in "table_in_private_room".
    All functions used in "table" function can be used in
    "table_in_private_room".

    If you use your introduced functions in normal "table", it croaks.

CAVEAT
    You cannot set "prototype" to introduced functions

SEE ALSO
    Teng, Tneg::Schema::Declare, Teng::Schema, Teng::Schema::Table

AUTHOR
    Makamaka Hannyaharamitu, <makamaka[at]cpan.org>

COPYRIGHT AND LICENSE
    Copyright 2011 by Makamaka Hannyaharamitu

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

